Documentation of Mix_Mean.py file

There are two parts of functions. The first part of the functions is partial
functions that will be embedded in the final functions. Those are defined in
the second part.

##########################################################################
1. read_expression_data(direction)
Read in expression data files .JSON generated by pipeline.

2. read_mov_data(direction)
Read in movement data files .JSON generated by pipeline.

3. PCA_kmeans_tool(DataFrame, delete_column, n_cluster)
Applying PCA approach to get principal components and information content.
Then apply k-means clustering on the results data point from PCA.

4. results_plot(kmeanDf, info_content, plot_name, y_kmeans, name)
Visualization of results data points after applying PCA and k-means.


##########################################################################
1. gene_expr_mean(direction)
Generate a panel plot of mean gene expression data treated with PCA
and k-means.

2. transcript_expr_mean(direction)
Generate a panel plot of mean transcript expression data treated with
PCA and k-means.


3. relative_transcript_expr(direction)
Generate a panel plot of mean relative transcript expression data 
treated with PCA and k-means.

4. ewfd_mean(direction)
Generate a panel plot of mean EWFD scores treated with PCA and k-means.

##########################################################################
##########################################################################

Documentation of PC_Mix_Mean.py file

The goal is to generate all principal components for all analysis levels.
A .JSON file will be at the end generated storing information from PCA.

There are three parts of function definitions. The first part defines the
partial functions that will be applied to the functions in the second part.
The function in the last part applies the functions from the second part.

##########################################################################

1. read_expression_data(direction)
Read all the expression data files generated by the pipeline.

2. read_mov_data(direction)
Read all the movement data files generated by the pipeline. 
Movements are needed for the calculation of EWFD scores.

3. PCA_tool(DataFrame, delete_column, conditions)
Applying PCA on a given DataFrame generated from the read functions. 
Delivering the information content vector and all principal components.

##########################################################################

1. PC_gene_expr(direction)
Generating all principal components and the information content vector 
for gene expression data. A dictionary will be returned.

2. PC_transcript_expr(direction)
Generating all principal components and the information content vector 
for transcript expression data. A dictionary will be returned.

3. PC_rel_transcript_expr(direction)
Generating all principal components and the information content vector 
for relative transcript expression data. A dictionary will be returned.

4. PC_EWFD(direction)
Generating all principal components and the information content vector 
for EWFD scores. A dictionary will be returned.

##########################################################################

1.  write_JSON(expr_direction, mov_direction, writepath)
Summarizing the PCA information for gene expression, transcript expression,
relative transcript expression and EWFD score into a .JSON file. 





















